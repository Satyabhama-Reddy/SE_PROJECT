{
  "_args": [
    [
      {
        "raw": "@unimodules/react-native-adapter@~4.0.0",
        "scope": "@unimodules",
        "escapedName": "@unimodules%2freact-native-adapter",
        "name": "@unimodules/react-native-adapter",
        "rawSpec": "~4.0.0",
        "spec": ">=4.0.0 <4.1.0",
        "type": "range"
      },
      "/home/satya/Desktop/SE/testing/node_modules/expo"
    ]
  ],
  "_from": "@unimodules/react-native-adapter@~4.0.0",
  "_hasShrinkwrap": false,
  "_id": "@unimodules/react-native-adapter@4.0.0",
  "_location": "/@unimodules/react-native-adapter",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-adapter_4.0.0_1568898171840_0.05131867512025656"
  },
  "_npmUser": {
    "name": "tsapeta",
    "email": "sapeta.tomasz@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "@unimodules/react-native-adapter@~4.0.0",
    "scope": "@unimodules",
    "escapedName": "@unimodules%2freact-native-adapter",
    "name": "@unimodules/react-native-adapter",
    "rawSpec": "~4.0.0",
    "spec": ">=4.0.0 <4.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/expo"
  ],
  "_resolved": "https://registry.npmjs.org/@unimodules/react-native-adapter/-/react-native-adapter-4.0.0.tgz",
  "_shasum": "2e02246f6450201d6cb0720f849c7059e8a9bc6d",
  "_shrinkwrap": null,
  "_spec": "@unimodules/react-native-adapter@~4.0.0",
  "_where": "/home/satya/Desktop/SE/testing/node_modules/expo",
  "author": {
    "name": "650 Industries, Inc."
  },
  "bugs": {
    "url": "https://github.com/expo/expo/issues"
  },
  "dependencies": {
    "invariant": "^2.2.4",
    "lodash": "^4.5.0",
    "prop-types": "^15.6.1"
  },
  "description": "The adapter to use universal modules with the React Native bridge",
  "devDependencies": {
    "@types/lodash": "^4.5.4",
    "@unimodules/core": "~4.0.0",
    "babel-preset-expo": "~7.0.0",
    "expo-module-scripts": "~1.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "2e02246f6450201d6cb0720f849c7059e8a9bc6d",
    "integrity": "sha512-zGAyDhqAEWvshdSxc523srP6OAZaSr95Cv5EuxLJbFGcJENHhK8o/qxhwS7/LYTF3LqtOlnSlwQta3v3y6kF4A==",
    "tarball": "https://registry.npmjs.org/@unimodules/react-native-adapter/-/react-native-adapter-4.0.0.tgz",
    "fileCount": 96,
    "unpackedSize": 146805,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdg3x8CRA9TVsSAnZWagAANKgP/j0J75nj6cZC1B/nx8x7\nbh6qBAR8Zifhf59BX9wFJu2NeukfQD6tM2+NBz0CrdBFmnANddVYTpsD+FlF\nUUmRo4NfCT4pY+wyOuCl0jWX/Hy0VlB1Mp6CAt/v2g7Fmv8xSIdc6PYXzWtU\nPGv5Hz6QW7BL4bnkOovjc51ch8S/x/7ytsCBPIai6755d+fhtHK7OABq+zxJ\nuzxgm9Ke37uLF8kEzXtGs0Wpr2qXeSMwRwxirEYp9dbZIdUsSyeNdRpPi1kT\nXEdEc8HFY0upxeHXT8gank1A5Ltrxt2l2Lr8GYOQfOSTKEDo0Lh7kNlZ/Imv\n9LG8SDRt4Q4CbIf25W89f42cc38FnKCNo4uIbki+df1M3XrhE5a9hgu+MF5+\nqAjZtGDHCmI+R0Dy4GT+Vc2STmTHVYCqIH/3m2Kjnx2KuEpnIdsKfqetrIwm\nRYQV9Dtri96XJOD9gZdKLGEIofijv0jZcsBYqDiMCpW5KCTHQ3zmr+WH5kI6\nHIMN7RF6cCd2axw7XJkkRe0oSSg/8B70uNetwIgmiQ6dSE8HJWFwOnSrBtyL\nXa07MpKMvJRf0KyXdRhMik6WfuRnEglnrzZ++nbEUgkegvwH51gV2i9KubQR\nV8o8JrzNp8FsBin+MGDZ36h1QtTOGQPqAFAZqcHQ+U74FHpqL9h0w6ePcu76\nYlQM\r\n=kWl9\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "4e13b3cb88d9205f14bee7764038ab2dd9ef1fbd",
  "homepage": "https://github.com/expo/expo/tree/master/packages/@unimodules/react-native-adapter",
  "jest": {
    "preset": "expo-module-scripts"
  },
  "keywords": [
    "react-native",
    "unimodules",
    "adapter"
  ],
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "bbarthec",
      "email": "bartlomiejbukowski.b@gmail.com"
    },
    {
      "name": "brentvatne",
      "email": "brentvatne@gmail.com"
    },
    {
      "name": "ccheever",
      "email": "ccheever@gmail.com"
    },
    {
      "name": "charliecruzan",
      "email": "charliecruzan@gmail.com"
    },
    {
      "name": "dsokal",
      "email": "dominiksokal@gmail.com"
    },
    {
      "name": "esamelson",
      "email": "eric@expo.io"
    },
    {
      "name": "evanbacon",
      "email": "baconbrix@gmail.com"
    },
    {
      "name": "expoadmin",
      "email": "support@expo.io"
    },
    {
      "name": "fson",
      "email": "ville.immonen@iki.fi"
    },
    {
      "name": "ide",
      "email": "ide+npm@jameside.com"
    },
    {
      "name": "mczernek",
      "email": "czernekmichal@gmail.com"
    },
    {
      "name": "quinlanj",
      "email": "quinlanjung@gmail.com"
    },
    {
      "name": "sjchmiela",
      "email": "sjchmiela@gmail.com"
    },
    {
      "name": "szymon20000",
      "email": "szymon.kapala@swmansion.com"
    },
    {
      "name": "tsapeta",
      "email": "sapeta.tomasz@gmail.com"
    },
    {
      "name": "uniadmin",
      "email": "brentvatne+unimodules@gmail.com"
    },
    {
      "name": "wkozyra",
      "email": "wojciech.kozyra@swmansion.com"
    }
  ],
  "name": "@unimodules/react-native-adapter",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": "*"
  },
  "readme": "# @unimodules/react-native-adapter\n\nA React Native adapter for Expo Universal Modules. It requires [`@unimodules/core`](https://github.com/expo/expo/tree/master/packages/@unimodules/core) to be installed and linked.\n\n## JavaScript installation\n\n```sh\n$ yarn add @unimodules/react-native-adapter\n\n# or\n\n$ npm install @unimodules/react-native-adapter --save\n```\n\n## Installation\n\nIf you are using `react-native-unimodules`, this package will already be installed and configured!\n\n### iOS (Cocoapods)\n\nIf you're using Cocoapods, add the dependency to your `Podfile`:\n\n`pod 'UMReactNativeAdapter', path: '../node_modules/@unimodules/react-native-adapter/ios', inhibit_warnings: true`\n\nand run `pod install`.\n\n### Android\n\n1.  Append the following lines to `android/settings.gradle`:\n    ```gradle\n    include ':unimodules-react-native-adapter'\n    project(':unimodules-react-native-adapter').projectDir = new File(rootProject.projectDir, '../node_modules/@unimodules/react-native-adapter/android')\n    ```\n2.  Insert the following lines inside the dependencies block in `android/app/build.gradle`:\n    ```gradle\n    compile project(':unimodules-react-native-adapter')\n    ```\n\n## Additional required setup\n\n#### iOS\n\n1. Open the `AppDelegate.m` of your application.\n2. Import `<UMCore/UMModuleRegistry.h>`, `<UMReactNativeAdapter/UMNativeModulesProxy.h>` and `<UMReactNativeAdapter/UMModuleRegistryAdapter.h>`.\n3. Make `AppDelegate` implement `RCTBridgeDelegate` protocol (`@interface AppDelegate () <RCTBridgeDelegate>`).\n4. Add a new instance variable to your `AppDelegate`:\n\n   ```objc\n   @interface AppDelegate () <RCTBridgeDelegate>\n\n   // add this line\n   @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n\n   @end\n   ```\n\n5. In `-application:didFinishLaunchingWithOptions:` add the following at the top of the implementation:\n   ```objc\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n   ```\n6. Add two methods to the `AppDelegate`'s implementation:\n\n   ```objc\n   - (NSArray<id<RCTBridgeModule>> *)extraModulesForBridge:(RCTBridge *)bridge\n   {\n       NSArray<id<RCTBridgeModule>> *extraModules = [_moduleRegistryAdapter extraModulesForBridge:bridge andExperience:nil];\n       // If you'd like to export some custom RCTBridgeModules that are not Expo modules, add them here!\n       return extraModules;\n   }\n\n   - (NSURL *)sourceURLForBridge:(RCTBridge *)bridge {\n       return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n   }\n   ```\n\n7. When initializing `RCTBridge`, make the `AppDelegate` a delegate of the bridge:\n   ```objc\n   RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   ```\n8. That's it! All in all, your `AppDelegate.m` should look similar to:\n\n   <details>\n       <summary>Click to expand</summary>\n       <p>\n\n   ```objc\n   #import \"AppDelegate.h\"\n\n   #import <React/RCTBundleURLProvider.h>\n   #import <React/RCTRootView.h>\n\n   #import <UMCore/UMModuleRegistry.h>\n   #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n   #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n   @interface AppDelegate () <RCTBridgeDelegate>\n\n   @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n\n   @end\n\n   @implementation AppDelegate\n\n   - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n   {\n       self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n       RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n       RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR_MODULE_NAME\" initialProperties:nil];\n       rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n       self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n       UIViewController *rootViewController = [UIViewController new];\n       rootViewController.view = rootView;\n       self.window.rootViewController = rootViewController;\n       [self.window makeKeyAndVisible];\n       return YES;\n   }\n\n   - (NSArray<id<RCTBridgeModule>> *)extraModulesForBridge:(RCTBridge *)bridge\n   {\n       NSArray<id<RCTBridgeModule>> *extraModules = [_moduleRegistryAdapter extraModulesForBridge:bridge andExperience:nil];\n       // If you'd like to export some custom RCTBridgeModules that are not universal modules, add them here!\n       return extraModules;\n   }\n\n   - (NSURL *)sourceURLForBridge:(RCTBridge *)bridge {\n       return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n   }\n\n   @end\n   ```\n\n   </details>\n\n#### Android\n\n1. Open the `MainApplication.java` of your application.\n2. Add to the imports:\n   ```java\n   import org.unimodules.adapters.react.ModuleRegistryAdapter;\n   import org.unimodules.adapters.react.ReactAdapterPackage;\n   import org.unimodules.adapters.react.ReactModuleRegistryProvider;\n   import org.unimodules.core.interfaces.Package;\n   ```\n3. Create an instance variable on the `Application`:\n   ```java\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(Arrays.<Package>asList(\n       new ReactAdapterPackage()\n       // more packages, like\n       // new CameraPackage(), if you use expo-camera\n       // etc.\n   ), /* singletonModules */ null);\n   ```\n4. Add `new ModuleRegistryAdapter(mModuleRegistryProvider)` to the list returned by `protected List<ReactPackage> getPackages()`.\n5. You're good to go!\n\n## Usage\n\n### Calling methods on native modules\n\nNative modules are available behind the proxy (`NativeModulesProxy` of `@unimodules/core`).\n\nTo call an exported method, use `NativeModulesProxy[clientCodeName].exportedMethod(...arguments)`, like this:\n\n```js\n// For UM_REGISTER_MODULE(FileSystem,) or UM_REGISTER_UMPORTED_MODULE(FileSystem)\n// and UM_EXPORT_METHOD_AS(getInfo, getInfo:(NSString *)path)\n\n// or for method\n// @ExpoMethod\n// public void getInfo(String path, Promise promise)\n// defined in native module with name FileSystem\n\nimport { NativeModulesProxy } from '@unimodules/core';\n\nconst { FileSystem } = NativeModulesProxy;\n\nFileSystem.getInfo('file:///...');\n```\n\nNote that all the methods return `Promise`s.\n\n### Synthetic Platform Events\n\nWhen creating web universal modules, you may find that you need to send events back to the API layer.\nIn this case you will want to use the shared `SyntheticPlatformEmitter` instance from `@unimodules/core`. The shared emitter emit events to `react-native`'s `NativeEventEmitter` and `@unimodules/core`'s `EventEmitter` .\n\n`ExponentGyroscope.web.ts`\n\n```js\n// Example from expo-sensors native web gyroscope sensor\n\nimport { SyntheticPlatformEmitter } from '@unimodules/core';\n\nSyntheticPlatformEmitter.emit('gyroscopeDidUpdate', { x, y, z });\n```\n\nThis emitted event is then received with a `EventEmitter` in the developer-facing API.\n\n```js\nimport { EventEmitter } from '@unimodules/core';\n\nimport ExponentGyroscope from './ExponentGyroscope';\n\nconst nativeEmitter = new EventEmitter(ExponentGyroscope);\n\n// On Android and iOS, `nativeEmitter` receives events sent from Objective-C and Java. On web, it\n// receives events from the shared `SyntheticPlatformEmitter` instance.\nnativeEmitter.addListener('gyroscopeDidUpdate', ({ x, y, z }) => {});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expo/expo.git"
  },
  "scripts": {
    "build": "expo-module build",
    "clean": "expo-module clean",
    "expo-module": "expo-module",
    "lint": "expo-module lint",
    "prepare": "expo-module prepare",
    "prepublishOnly": "expo-module prepublishOnly",
    "test": "expo-module test"
  },
  "sideEffects": false,
  "types": "build/index.d.ts",
  "unimodulePeerDependencies": {
    "@unimodules/core": "^2.0.0-alpha.0",
    "unimodules-font-interface": "*",
    "unimodules-image-loader-interface": "*",
    "unimodules-permissions-interface": "*"
  },
  "version": "4.0.0"
}
