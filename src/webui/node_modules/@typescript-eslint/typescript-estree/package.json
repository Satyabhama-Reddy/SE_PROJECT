{
  "_args": [
    [
      {
        "raw": "@typescript-eslint/typescript-estree@2.4.0",
        "scope": "@typescript-eslint",
        "escapedName": "@typescript-eslint%2ftypescript-estree",
        "name": "@typescript-eslint/typescript-estree",
        "rawSpec": "2.4.0",
        "spec": "2.4.0",
        "type": "version"
      },
      "/home/satya/Desktop/SE/testing/node_modules/@typescript-eslint/experimental-utils"
    ]
  ],
  "_from": "@typescript-eslint/typescript-estree@2.4.0",
  "_hasShrinkwrap": false,
  "_id": "@typescript-eslint/typescript-estree@2.4.0",
  "_location": "/@typescript-eslint/typescript-estree",
  "_nodeVersion": "10.16.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/typescript-estree_2.4.0_1571072508285_0.35917066764835215"
  },
  "_npmUser": {
    "name": "jameshenry",
    "email": "npm@jameshenry.email"
  },
  "_npmVersion": "lerna/3.16.4/node@v10.16.3+x64 (linux)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@typescript-eslint/typescript-estree@2.4.0",
    "scope": "@typescript-eslint",
    "escapedName": "@typescript-eslint%2ftypescript-estree",
    "name": "@typescript-eslint/typescript-estree",
    "rawSpec": "2.4.0",
    "spec": "2.4.0",
    "type": "version"
  },
  "_requiredBy": [
    "/@typescript-eslint/experimental-utils",
    "/@typescript-eslint/parser"
  ],
  "_resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-2.4.0.tgz",
  "_shasum": "722c95493e1b7682893edaaaec0e69f36917feef",
  "_shrinkwrap": null,
  "_spec": "@typescript-eslint/typescript-estree@2.4.0",
  "_where": "/home/satya/Desktop/SE/testing/node_modules/@typescript-eslint/experimental-utils",
  "bugs": {
    "url": "https://github.com/typescript-eslint/typescript-eslint/issues"
  },
  "dependencies": {
    "chokidar": "^3.0.2",
    "glob": "^7.1.4",
    "is-glob": "^4.0.1",
    "lodash.unescape": "4.0.1",
    "semver": "^6.3.0"
  },
  "description": "A parser that converts TypeScript source code into an ESTree compatible form",
  "devDependencies": {
    "@babel/code-frame": "7.5.5",
    "@babel/parser": "7.5.5",
    "@babel/types": "^7.3.2",
    "@types/babel-code-frame": "^6.20.1",
    "@types/glob": "^7.1.1",
    "@types/is-glob": "^4.0.1",
    "@types/lodash.isplainobject": "^4.0.4",
    "@types/lodash.unescape": "^4.0.4",
    "@types/semver": "^6.0.1",
    "@types/tmp": "^0.1.0",
    "@typescript-eslint/shared-fixtures": "2.4.0",
    "babel-code-frame": "^6.26.0",
    "glob": "^7.1.4",
    "lodash.isplainobject": "4.0.6",
    "tmp": "^0.1.0",
    "typescript": "*"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-/DzDAtMqF5d9IlXrrvu/Id/uoKjnSxf/3FbtKK679a/T7lbDM8qQuirtGvFy6Uh+x0hALuCMwnMfUf0P24/+Iw==",
    "shasum": "722c95493e1b7682893edaaaec0e69f36917feef",
    "tarball": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-2.4.0.tgz",
    "fileCount": 56,
    "unpackedSize": 421858,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdpKn9CRA9TVsSAnZWagAACfkP/A4RzWcdnLXmtEPNzALC\nFYSwMVKEZbPtyZ8qKxY3TnLfcl5eQ6qj/kcR4gadbuO6s6DMNuot74GeSsok\n4xETeQc+cS88ubgFTfruiPXXE0wD1A79w/tp6bmzzi4UjDHdiocEY6os28Oi\nBVbRs1uyeOocSFF4TQ1P03mAAOI53uVBhcAsHb/3yb1X/bCJNAtJNq/J1OfE\nxEBKlxxj1c4hLihsJoAyliF9DMQQgjKfq4/PVYC9jCyJfDcl9q3Do8/zom1T\n+wJ1c4fGQZ+UXUaF/lPMAjzLLN3wRb0JcJFvBc1C/Ov1NHExLP1oaUVaCspe\nhaPmuMXvKlCwL1kCKWdC3d+BGxmnKxlcKxhkt2y1M+VcLDJAttuKewyfSI7g\njldSniLo3V/fG93vEu8iabFpClTiJwDTC/K1XiOAa/p2A7VPBvvWD9IvfC0u\nz1SM0b4ydyuvvW/DBEvla3mh01+2jtnmaPDKdSud9YfuX7fx6idz3zgTNyoa\nb6YMIOdPgkTNmTo+8I6EM84O4DF9NLm0d0fi1/hQFAxVOPBc7I7JcKlqYWp4\nUQwQQSiKURlDi6MQb2v/hYEA51CPUTUA6ia1igu8gbzD5n1gWTBXnu+mLIg4\nAHEUasdQGiYi5Q8UPBEVShb/4pVkNRwQW/npQ85HaeA554QmjRk2ZQlaWG3Q\nzycF\r\n=B7vk\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": "^8.10.0 || ^10.13.0 || >=11.10.1"
  },
  "files": [
    "dist",
    "README.md",
    "LICENSE"
  ],
  "gitHead": "111ecc668eb8a332d7311dacf196fceec83316cb",
  "homepage": "https://github.com/typescript-eslint/typescript-eslint#readme",
  "keywords": [
    "ast",
    "estree",
    "ecmascript",
    "javascript",
    "typescript",
    "parser",
    "syntax"
  ],
  "license": "BSD-2-Clause",
  "main": "dist/parser.js",
  "maintainers": [
    {
      "name": "jameshenry",
      "email": "james@henry.sc"
    }
  ],
  "name": "@typescript-eslint/typescript-estree",
  "optionalDependencies": {},
  "readme": "<h1 align=\"center\">TypeScript ESTree</h1>\n\n<p align=\"center\">A parser that converts TypeScript source code into an <a href=\"https://github.com/estree/estree\">ESTree</a>-compatible form</p>\n\n<p align=\"center\">\n    <a href=\"https://dev.azure.com/typescript-eslint/TypeScript%20ESLint/_build/latest?definitionId=1&branchName=master\"><img src=\"https://img.shields.io/azure-devops/build/typescript-eslint/TypeScript%20ESLint/1/master.svg?label=%F0%9F%9A%80%20Azure%20Pipelines&style=flat-square\" alt=\"Azure Pipelines\"/></a>\n    <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/LICENSE\"><img src=\"https://img.shields.io/npm/l/typescript-estree.svg?style=flat-square\" alt=\"GitHub license\" /></a>\n    <a href=\"https://www.npmjs.com/package/@typescript-eslint/typescript-estree\"><img src=\"https://img.shields.io/npm/v/@typescript-eslint/typescript-estree.svg?style=flat-square\" alt=\"NPM Version\" /></a>\n    <a href=\"https://www.npmjs.com/package/@typescript-eslint/typescript-estree\"><img src=\"https://img.shields.io/npm/dm/@typescript-eslint/typescript-estree.svg?style=flat-square\" alt=\"NPM Downloads\" /></a>\n    <a href=\"http://commitizen.github.io/cz-cli/\"><img src=\"https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?style=flat-square\" alt=\"Commitizen friendly\" /></a>\n</p>\n\n<br>\n\n## About\n\nThis parser is somewhat generic and robust, and could be used to power any use-case which requires taking TypeScript source code and producing an ESTree-compatible AST.\n\nIn fact, it is already used within these hyper-popular open-source projects to power their TypeScript support:\n\n- [ESLint](https://eslint.org), the pluggable linting utility for JavaScript and JSX\n- [Prettier](https://prettier.io), an opinionated code formatter\n\n## Installation\n\n```sh\nnpm install @typescript-eslint/typescript-estree --save-dev\n```\n\n## API\n\n### parse(code, options)\n\nParses the given string of code with the options provided and returns an ESTree-compatible AST. The options object has the following properties:\n\n```js\n{\n  // attach range information to each node\n  range: false,\n\n  // attach line/column location information to each node\n  loc: false,\n\n  // create a top-level tokens array containing all tokens\n  tokens: false,\n\n  // create a top-level comments array containing all comments\n  comment: false,\n\n  // enable parsing JSX. For more details, see https://www.typescriptlang.org/docs/handbook/jsx.html\n  jsx: false,\n\n  /*\n   * The JSX AST changed the node type for string literals\n   * inside a JSX Element from `Literal` to `JSXText`.\n   * When value is `true`, these nodes will be parsed as type `JSXText`.\n   * When value is `false`, these nodes will be parsed as type `Literal`.\n   */\n  useJSXTextNode: false,\n\n  // Cause the parser to error if it encounters an unknown AST node type (useful for testing)\n  errorOnUnknownASTType: false,\n\n  /*\n   * Allows overriding of function used for logging.\n   * When value is `false`, no logging will occur.\n   * When value is not provided, `console.log()` will be used.\n   */\n  loggerFn: undefined,\n\n  /**\n   * Allows the user to control whether or not two-way AST node maps are preserved\n   * during the AST conversion process.\n   *\n   * By default: the AST node maps are NOT preserved, unless `project` has been specified,\n   * in which case the maps are made available on the returned `parserServices`.\n   *\n   * NOTE: If `preserveNodeMaps` is explicitly set by the user, it will be respected,\n   * regardless of whether or not `project` is in use.\n   */\n  preserveNodeMaps: undefined\n}\n```\n\nExample usage:\n\n```js\nconst parser = require('@typescript-eslint/typescript-estree');\nconst code = `const hello: string = 'world';`;\nconst ast = parser.parse(code, {\n  range: true,\n  loc: true,\n});\n```\n\n### version\n\nExposes the current version of typescript-estree as specified in package.json.\n\nExample usage:\n\n```js\nconst parser = require('@typescript-eslint/typescript-estree');\nconst version = parser.version;\n```\n\n### AST_NODE_TYPES\n\nExposes an object that contains the AST node types produced by the parser.\n\nExample usage:\n\n```js\nconst parser = require('@typescript-eslint/typescript-estree');\nconst astNodeTypes = parser.AST_NODE_TYPES;\n```\n\n## Supported TypeScript Version\n\nWe will always endeavor to support the latest stable version of TypeScript.\n\nThe version of TypeScript currently supported by this parser is `~3.2.1`. This is reflected in the `devDependency` requirement within the package.json file, and it is what the tests will be run against. We have an open `peerDependency` requirement in order to allow for experimentation on newer/beta versions of TypeScript.\n\nIf you use a non-supported version of TypeScript, the parser will log a warning to the console.\n\n**Please ensure that you are using a supported version before submitting any issues/bug reports.**\n\n## Reporting Issues\n\nPlease check the current list of open and known issues and ensure the issue has not been reported before. When creating a new issue provide as much information about your environment as possible. This includes:\n\n- TypeScript version\n- The `typescript-estree` version\n\n## AST Alignment Tests\n\nA couple of years after work on this parser began, the TypeScript Team at Microsoft began [officially supporting TypeScript parsing via Babel](https://blogs.msdn.microsoft.com/typescript/2018/08/27/typescript-and-babel-7/).\n\nI work closely with the TypeScript Team and we are gradually aliging the AST of this project with the one produced by Babel's parser. To that end, I have created a full test harness to compare the ASTs of the two projects which runs on every PR, please see the code for more details.\n\n## Build/Test Commands\n\n- `npm test` - run all tests\n- `npm run unit-tests` - run only unit tests\n- `npm run ast-alignment-tests` - run only Babylon AST alignment tests\n\n## License\n\nTypeScript ESTree inherits from the the original TypeScript ESLint Parser license, as the majority of the work began there. It is licensed under a permissive BSD 2-clause license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/typescript-eslint/typescript-eslint.git",
    "directory": "packages/typescript-estree"
  },
  "scripts": {
    "build": "tsc -b tsconfig.build.json",
    "clean": "tsc -b tsconfig.build.json --clean",
    "format": "prettier --write \"./**/*.{ts,js,json,md}\" --ignore-path ../../.prettierignore",
    "lint": "eslint . --ext .js,.ts --ignore-path='../../.eslintignore'",
    "test": "jest --coverage",
    "typecheck": "tsc -p tsconfig.json --noEmit"
  },
  "types": "dist/parser.d.ts",
  "version": "2.4.0"
}
